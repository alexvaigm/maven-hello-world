name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REGISTRY: docker.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Get current version from pom.xml
      id: get_version
      run: |
        cd myapp
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Increment patch version
      id: increment_version
      run: |
        cd myapp
        CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
        echo "Current version: $CURRENT_VERSION"
        
        # Parse version parts (assuming format X.Y.Z)
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
        
        # Increment patch
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Update pom.xml with new version
        mvn versions:set -DnewVersion=$NEW_VERSION
        mvn versions:commit
    
    - name: Compile the code
      run: |
        cd myapp
        mvn clean compile
    
    - name: Run tests
      run: |
        cd myapp
        mvn test
    
    - name: Package the application
      run: |
        cd myapp
        mvn package -DskipTests
    
    - name: Create build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact-${{ steps.increment_version.outputs.new_version }}
        path: myapp/target/*.jar
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/maven-hello-world:${{ steps.increment_version.outputs.new_version }}
          ${{ env.DOCKER_USERNAME }}/maven-hello-world:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Download and run Docker image
      run: |
        echo "Pulling and running the Docker image..."
        docker pull ${{ env.DOCKER_USERNAME }}/maven-hello-world:${{ steps.increment_version.outputs.new_version }}
        docker run --rm ${{ env.DOCKER_USERNAME }}/maven-hello-world:${{ steps.increment_version.outputs.new_version }}
    
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.1'

    - name: Set up Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        version: v0.22.0  # You can specify the Kind version if needed

    - name: Set KUBECONFIG env
      run: echo "KUBECONFIG=${HOME}/.kube/config" >> $GITHUB_ENV
    - name: Deploy with Helm
      run: |
        echo "Deploying application with Helm..."
        cd helm-chart
        helm upgrade --install maven-hello-world . \
          --set image.repository=${{ env.DOCKER_USERNAME }}/maven-hello-world \
          --set image.tag=${{ steps.increment_version.outputs.new_version }} \
          --create-namespace \
          --namespace maven-hello-world
    
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        kubectl get pods -n maven-hello-world
        kubectl get services -n maven-hello-world
        kubectl -n maven-hello-world describe pod -l app.kubernetes.io/name=maven-hello-world
        sleep 20
        kubectl -n maven-hello-world describe pod -l app.kubernetes.io/name=maven-hello-world
        
        # Wait for pod to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=maven-hello-world -n maven-hello-world --timeout=300s
        
        # Test the application
        echo "Application deployed successfully!"
